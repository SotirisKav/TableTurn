# .github/workflows/deploy.yml

name: TableTurn CI/CD Pipeline for Azure

# -----------------------------------------------------------------------------
#  TRIGGERS: When does this pipeline run?
# -----------------------------------------------------------------------------
on:
  # 1. Run on every push to the 'main' branch (for automatic deployment)
  push:
    branches:
      - main

  # 2. Run on every pull request targeting the 'main' branch (for testing before merge)
  pull_request:
    branches:
      - main

  # 3. Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# -----------------------------------------------------------------------------
#  JOBS: What tasks does this pipeline perform?
# -----------------------------------------------------------------------------
jobs:
  # ===========================================================================
  #  CI JOB: Build & Test
  #  This job runs on EVERY push and pull request to ensure code quality.
  # ===========================================================================
  build-and-test:
    runs-on: ubuntu-latest # Use a standard Linux environment

    strategy:
      matrix:
        node-version: [18.x] # Specify the Node.js version to use

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm' # Cache npm packages for faster builds
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      # Step 3: Install Frontend Dependencies
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./frontend

      # Step 4: Install Backend Dependencies (including devDependencies for testing)
      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./backend

      # Step 5: Run Linter (Optional but recommended)
      # - name: Run Linter
      #   run: npm run lint
      #   working-directory: ./backend # Or wherever your lint script is

      # Step 6: Install E2E Test Dependencies
      - name: Install E2E Test Dependencies
        run: npm install
        working-directory: ./tests

      # Step 7: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ./tests

      # Step 8: Start Backend for E2E Testing
      - name: Start Backend Server
        run: |
          npm install
          npm start &
          sleep 15  # Wait for server to start
          curl -f http://localhost:3000 || exit 1  # Verify server is running
        working-directory: ./backend
        env:
          NODE_ENV: test
          PORT: 3000
          # Add your test database connection variables here if needed

      # Step 9: Run End-to-End Tests
      - name: Run E2E Tests
        run: npm run test:ci
        working-directory: ./tests
        env:
          BASE_URL: http://localhost:3000
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL || 'test@restaurant.com' }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'testpassword' }}
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL || 'admin@tableturn.com' }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD || 'adminpassword' }}
          CI: true

      # Step 10: Upload E2E Test Results
      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-${{ github.run_number }}
          path: |
            tests/test-results/
            tests/playwright-report/
            tests/screenshots/
          retention-days: 7

      # Step 11: Upload E2E Videos on Failure
      - name: Upload E2E Videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-videos-${{ github.run_number }}
          path: tests/test-results/
          retention-days: 7

      # Step 12: Build the Frontend
      - name: Build Frontend
        run: npm run build
        working-directory: ./frontend

  # ===========================================================================
  #  CD JOB: Deploy to Azure
  #  This job ONLY runs when code is pushed or merged to the 'main' branch.
  # ===========================================================================
  deploy:
    # This job depends on the 'build-and-test' job finishing successfully
    needs: build-and-test

    # This condition ensures it ONLY runs on the 'main' branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    runs-on: ubuntu-latest
    environment:
      name: 'Production' # Optional: for GitHub environments
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      # Step 3: Build the Frontend
      - name: Install and Build Frontend
        run: |
          npm install
          npm run build
        working-directory: ./frontend

      # Step 4: Prepare the Backend for Deployment
      - name: Prepare Backend
        run: |
          # Create the public directory to hold the frontend build
          mkdir -p public
          # Copy the built frontend into the backend's public folder
          cp -r ../frontend/dist/* ./public/
          # Install ONLY production dependencies for the backend
          npm install --only=production
        working-directory: ./backend

      # Step 5: Deploy to Azure App Service
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'tableturn-app' # New TableTurn app name
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./backend # Deploy the entire backend folder