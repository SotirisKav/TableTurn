# .github/workflows/deploy.yml

name: AICHMI CI/CD Pipeline for Azure

# -----------------------------------------------------------------------------
#  TRIGGERS: When does this pipeline run?
# -----------------------------------------------------------------------------
on:
  # 1. Run on every push to the 'main' branch (for automatic deployment)
  push:
    branches:
      - main

  # 2. Run on every pull request targeting the 'main' branch (for testing before merge)
  pull_request:
    branches:
      - main

  # 3. Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# -----------------------------------------------------------------------------
#  JOBS: What tasks does this pipeline perform?
# -----------------------------------------------------------------------------
jobs:
  # ===========================================================================
  #  CI JOB: Build & Test
  #  This job runs on EVERY push and pull request to ensure code quality.
  # ===========================================================================
  build-and-test:
    runs-on: ubuntu-latest # Use a standard Linux environment

    strategy:
      matrix:
        node-version: [18.x] # Specify the Node.js version to use

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm' # Cache npm packages for faster builds
          cache-dependency-path: |
            aichmi_frontend/package-lock.json
            aichmi_backend/package-lock.json

      # Step 3: Install Frontend Dependencies
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./aichmi_frontend

      # Step 4: Install Backend Dependencies (including devDependencies for testing)
      - name: Install Backend Dependencies
        run: npm install
        working-directory: ./aichmi_backend

      # Step 5: Run Linter (Optional but recommended)
      # - name: Run Linter
      #   run: npm run lint
      #   working-directory: ./aichmi_backend # Or wherever your lint script is

      # Step 6: Run Automated Tests (Crucial for CI)
      # - name: Run Tests
      #   run: npm test
      #   working-directory: ./aichmi_backend

      # Step 7: Build the Frontend
      - name: Build Frontend
        run: npm run build
        working-directory: ./aichmi_frontend

  # ===========================================================================
  #  CD JOB: Deploy to Azure
  #  This job ONLY runs when code is pushed or merged to the 'main' branch.
  # ===========================================================================
  deploy:
    # This job depends on the 'build-and-test' job finishing successfully
    needs: build-and-test

    # This condition ensures it ONLY runs on the 'main' branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    runs-on: ubuntu-latest
    environment:
      name: 'Production' # Optional: for GitHub environments
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js environment
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: |
            aichmi_frontend/package-lock.json
            aichmi_backend/package-lock.json

      # Step 3: Build the Frontend
      - name: Install and Build Frontend
        run: |
          npm install
          npm run build
        working-directory: ./aichmi_frontend

      # Step 4: Prepare the Backend for Deployment
      - name: Prepare Backend
        run: |
          # Create the public directory to hold the frontend build
          mkdir -p public
          # Copy the built frontend into the backend's public folder
          cp -r ../aichmi_frontend/dist/* ./public/
          # Install ONLY production dependencies for the backend
          npm install --only=production
        working-directory: ./aichmi_backend

      # Step 5: Deploy to Azure App Service
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'aichmi-app' # The name of your Azure App Service
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./aichmi_backend # Deploy the entire backend folder